<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mongodb | Glide Note]]></title>
  <link href="https://blog.glidenote.com/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="https://blog.glidenote.com/"/>
  <updated>2018-08-25T15:30:49+09:00</updated>
  <id>https://blog.glidenote.com/</id>
  <author>
    <name><![CDATA[Akira Maeda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FluentdからMongoDBにデータを文字列(string)から数値(integer)に変換して入れる]]></title>
    <link href="https://blog.glidenote.com/blog/2013/04/08/fluentd-mongodb-integer/"/>
    <updated>2013-04-08T23:00:00+09:00</updated>
    <id>https://blog.glidenote.com/blog/2013/04/08/fluentd-mongodb-integer</id>
    <content type="html"><![CDATA[<p>最近ようやく仕事でガッツリFluentdとMongoDBを触るようになってちょっとハマったことが
あったので誰かの役に立つかも知れないので書いておく。</p>

<p>Fluentd界隈は開発が活発なので、数ヶ月後にはこの記事の情報も恐らく古くなっているのでご注意ください。</p>

<h2 id="section">結論</h2>

<p>書いてたら長くなってしまったので先に要点というか結論を書いておく。</p>

<ul>
  <li><code>apache</code> =&gt; <code>fluentd</code> =&gt; <code>MongoDB</code> とapacheのアクセスログをMongoDBに入れたときに<code>code</code>や<code>size</code>といった数値が文字列(string)として入っていた</li>
  <li><code>td-agent.conf</code>の<code>format</code>を自作すると、時間以外のフィールドが文字列(string)として扱われる</li>
  <li><a href="https://rubygems.org/gems/fluent-plugin-typecast">fluent-plugin-typecast</a>を利用することで<code>code</code>や<code>size</code>といった特定のフィールドを、<code>string</code>や<code>integer</code>などの任意のデータ型に変換可能。今回の場合は<code>size</code>と<code>code</code>をintegerとして扱うように変換して解決した</li>
  <li>MongoDBのAggregation Frameworkは大変便利</li>
</ul>

<h2 id="section-1">前段</h2>

<p>MongoDBは2.2から<a href="http://docs.mongodb.org/manual/aggregation/">Aggregation Framework</a>というのが
使えるようになっていて、これまでMapReduceなどを用いないと実行出来なかったデータの集計作業などが
コマンド一発で出来るようになっているとのこと。
Fluentdを利用してMongoDBに貯めていたapacheのログからvhost毎のトラフィック集計作業を行おうとしてた。</p>

<p>MongoDBに入っているapacheのログデータは下記のような形</p>

<p><code>json
{ 
  "_id" : ObjectId("515e912431166b166b000002"), 
  "host" : "hogemoge.glidenote.com", 
  "user" : "192.168.25.84", 
  "method" : "GET", 
  "path" : "/htdocs_error_Zq9kbQHobRDu8hdp4K06lMGUOLwFoY0dQUSsIqgXLVBYB3gwAIBy9NNcd9coPHRV/css/error.css", 
  "code" : "200", 
  "size" : "423", 
  "referer" : "http://hogemoge.glidenote.com/", 
  "agent" : "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43 Safari/537.31", "time" : ISODate("2013-04-05T08:53:50Z") 
}
</code></p>

<p><code>hogemoge.glidenote.com</code>の転送量の集計をするために下記コマンドで<code>size</code>で集計をかける。</p>

<p><code>json
db.accesslog.aggregate(
  {$match   :{"vhost":"hogemoge.glidenote.com" } },
  {$project :{"vhost":1, "size":1} },
  {$group   :{"_id":"$vhost", "traffic":{"$sum":"$size"} } }
);
</code></p>

<p>…、集計出来ないッ!</p>

<h2 id="aggregation-framework">aggregation frameworkで集計出来ない原因</h2>

<p>なぜ集計出来ないのか調査すると、<code>size</code>が文字列として扱われていた。ちなみに各フィールドのデータ型は下記のような形で調べられる。(ダブルクオートで囲まれているので、その時点でintegerではないんですが調査中は全く気づかなかった…)</p>

<p>``` json
// type 2で抽出されるものはstring
db.accesslog.find( { size : { $type : 2 } } )</p>

<p>// type 16で抽出されるものは32-bit integer
db.accesslog.find( { size : { $type : 16 } } )
```</p>

<h2 id="section-2">数値が文字列として扱われている問題の原因</h2>

<p>同じような現象を調べて下記有益情報を発見。</p>

<ul>
  <li><a href="http://d.hatena.ne.jp/hetaremania/20120627/1340789087">fluentdからmongodbにint（数値）として突っ込む - おどろく程やる気のない日々</a></li>
  <li><a href="http://d.hatena.ne.jp/mikeda/20120514/1337010657">fluentdのin_tailで特定フィールドをintに変えたい - IT 東京 楽しいと思うこと</a></li>
</ul>

<h3 id="section-3">問題が発生した時の構成</h3>

<p>問題が発生していたときの構成。(WEBサーバ約200台で、LOGサーバは1台の構成)</p>

<p><img src="https://blog.glidenote.com/images/2013/04/fluentd-mongo0.png" alt="" /></p>

<p>結論を言うと今回の現象はLOGサーバ側で利用していた<code>fluent-plugin-parser</code>の<a href="https://github.com/tagomoris/fluent-plugin-parser/blob/master/lib/fluent/plugin/fixed_parser.rb">fixed_parser.rb</a>部分で発生していた。<a href="https://github.com/fluent/fluentd/blob/master/lib/fluent/parser.rb">fluentdのparser.rb</a>を利用しても同様に発生する問題(2013年4月8日現在)  </p>

<h3 id="string">なぜ数値が文字列(string)として扱われるのか</h3>

<p>解決方法を探るためにソースを見てみると、<code>format apache2</code>の場合は<code>ApacheParser</code>が利用されて<code>size</code>や<code>code</code>に<code>to_i</code>の処理が入っており数値に変換されているが、<code>format</code>を自分で書くと<code>RegexpParser</code>が利用されて<code>time</code>以外は文字列として扱われている。今回は<code>format apache2</code>がそのまま利用出来ないログの形式でformatを自分で書いていたのも一因としてある。</p>

<p><a href="https://github.com/tagomoris/fluent-plugin-parser/blob/master/lib/fluent/plugin/fixed_parser.rb#L178-L187">https://github.com/tagomoris/fluent-plugin-parser/blob/master/lib/fluent/plugin/fixed_parser.rb#L178-L187</a></p>

<h2 id="section-4">問題の解決方法</h2>

<p>問題の原因がわかり、解決方法をいろいろ試していたら、弊社の<a href="https://twitter.com/banyan">@banyan</a>先生から<a href="https://github.com/tarom/fluent-plugin-typecast">fluent-plugin-typecast</a>というのがあると有益情報をゲット。</p>

<p>早速下記のような形で導入</p>

<p><code>sh
/usr/lib64/fluent/ruby/bin/fluent-gem install fluent-plugin-typecast
</code></p>

<p><code>td-agent.conf</code>の<code>fluent-plugin-typecast</code>の部分は下記のような形</p>

<p><code>
&lt;match get.apache.access&gt;
  type typecast
  item_types size:integer,code:integer
  tag filtered.apache.access
&lt;/match&gt;
</code></p>

<p>apacheのログを流してみると、ちゃんと<code>size</code>と<code>code</code>が数値(integer)としてMongoDBに入るようになった。</p>

<h2 id="aggregation-framework-1">Aggregation Frameworkで再度集計してみる</h2>

<p>当初の目的であるMongoDBのAggregation Frameworkを再度試してみる。</p>

<p>``` json
db.accesslog.aggregate(
  {$match   :{“vhost”:”hogemoge.glidenote.com” } },
  {$project :{“vhost”:1, “size”:1} },
  {$group   :{“_id”:”$vhost”, “traffic”:{“$sum”:”$size”} } }
);</p>

<p>{
    “result” : [
        {
            “_id” : “hogemoge.glidenote.com”,
            “traffic” : 289736716
        }
    ],
    “ok” : 1
}
```</p>

<p>一瞬で集計が完了。素晴らしい!!(<code>$match</code>を書けるvhost、timeとかにindex貼ってないと多分死にます)</p>

<h3 id="section-5">改善後の構成</h3>

<p><img src="https://blog.glidenote.com/images/2013/04/fluentd-mongo1.png" alt="" /></p>

<p>この構成で1秒に約4000ドキュメント、1日で約3億5千ドキュメントをMongoDBに突っ込んで
数日様子を見てますが、特に大きな問題も無く稼働中です。</p>

<p>当初どこが問題の原因か全く検討も付かなくて調査に半日近く時間を要した。
仕事でガッツリ触らないと覚えないし、勘も働かないなーと改めて感じた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subsonic+Nginxのアクセスログをfluentdを利用してMongoDBに入れてみた]]></title>
    <link href="https://blog.glidenote.com/blog/2012/05/21/fluentd-nginx-mongodb/"/>
    <updated>2012-05-21T00:41:00+09:00</updated>
    <id>https://blog.glidenote.com/blog/2012/05/21/fluentd-nginx-mongodb</id>
    <content type="html"><![CDATA[<p>                                                                                                                                                                      
  <a href="https://www.amazon.co.jp/Software-Design-%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2-%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3-2012%E5%B9%B4/dp/B007Y725LE?SubscriptionId=AKIAJVWWFTEVIXZXZLWA&amp;tag=glidenote-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B007Y725LE"><img src="https://images-fe.ssl-images-amazon.com/images/I/51i4hIKlScL._SL160_.jpg" align="right" /></a>
</p>

<p><a href="http://atnd.org/events/27808">Fluentd Casual Talks</a>に参加し、fluentdの使いどころが理解できて、
意識が高いうちに早速fluentdの導入をしSubsonic+nginxのアクセスログをMongoDBに入れてみたのでメモ。</p>

<p>導入環境はwebサーバCentOS 6、ログ収集サーバがCentOS 5で、fluentdのバージョンは
<code>td-agent-1.1.5.1-0.x86_64</code>になります。いずれもさくらVPSで稼働させています。
nginxの導入は以前書いた下記のエントリを参考にして下さい。</p>

<ul>
  <li><a href="https://blog.glidenote.com/blog/2012/04/03/subsonic-nginx/">さくらVPS 2G+Subsonic+Nginxで自分用ストリーミングサーバを構築 - Glide Note - グライドノート</a></li>
</ul>

<h2 id="section">今回行った作業の流れ</h2>

<p>fluentdを初めて触るので、今回は下記のように順を追って検証と導入を行いました。</p>

<ul>
  <li>fluentdの導入</li>
  <li>サーバ1台でwebサーバとログ収集サーバを動かしてみる</li>
  <li>webサーバとログ収集用サーバをそれぞれ用意して動かして見る</li>
  <li>ログ収集用サーバにMongoDBを入れて、データを入れてみる</li>
</ul>

<h2 id="fluentdtd-agent">fluentd(td-agent)の導入</h2>

<p><a href="http://help.treasure-data.com/kb/installing-td-agent-daemon/installing-td-agent-for-redhat-and-centos">Installing td-agent for Redhat and CentOS</a>に
記載してある方法で、yum経由で導入。webサーバ、ログサーバ双方に導入します。<code>/etc/td-agent/td-agent.conf</code>は用途に合わせ編集します。</p>

<p><div><script src='https://gist.github.com/2726076.js'></script>
<noscript><pre><code>/bin/cat &lt;&lt;&#39;EOF&#39;&gt; /etc/yum.repos.d/td.repo
[treasuredata]
name=TreasureData
baseurl=http://packages.treasure-data.com/redhat/$basearch
gpgcheck=0
EOF

yum -y update
yum -y install td-agent
/etc/init.d/td-agent start</code></pre></noscript></div>
</p>

<h2 id="web">webサーバとログ収集サーバを同じサーバで動かした場合</h2>

<p>とりあえずfluentdの動作検証のために、1台で動かしてみて、ローカルのファイルに書き出してみる。</p>

<p><img src="https://blog.glidenote.com/images/2012/05/fluent-alone.png" alt="" /></p>

<p><code>/etc/td-agent/td-agent.conf</code>は下記のような感じ。</p>

<p><div><script src='https://gist.github.com/2732356.js?file=td-agent.conf'></script>
<noscript><pre><code># 1台で動かす場合の設定
&lt;source&gt;
  type tail
  path /var/log/nginx/access.log
  format apache
  tag nginx.access
  pos_file /var/log/td-agent/nginx.pos
&lt;/source&gt;

&lt;match nginx.access&gt;
  type file
  path /var/log/td-agent/access_log
&lt;/match&gt;
</code></pre></noscript></div>
</p>

<p>nginxのログローマットをapacheと合わせるために下記のように修正。(これに気づかずかなりハマりました。)</p>

<p><div><script src='https://gist.github.com/2732356.js?file=nginx.conf'></script>
<noscript><pre><code>    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
                      &#39;&quot;$http_user_agent&quot;&#39;;</code></pre></noscript></div>
</p>

<p>設定を反映させて再起動。</p>

<p><code>
sudo /etc/rc.d/init.d/td-agent restart
sudo /etc/rc.d/init.d/nginx restart
</code></p>

<p>実際にnginxのアクセスログが、fluentdに渡って<code>/var/log/td-agent/access_log</code>へ出力されている</p>

<p><img src="https://blog.glidenote.com/images/2012/05/fluent-log0.png" alt="" /></p>

<h2 id="web2">webサーバ、ログ収集サーバの2台構成で動かした場合</h2>

<p><img src="https://blog.glidenote.com/images/2012/05/fluent-web-log.png" alt="" /></p>

<p>webサーバ側の<code>td-agent.conf</code>を下記のように修正してtd-agentの再起動</p>

<p><div><script src='https://gist.github.com/2732356.js?file=app-td-agent.conf'></script>
<noscript><pre><code># appサーバ用の設定
&lt;source&gt;
  type tail
  path /var/log/nginx/access.log
  format apache
  tag nginx.access
  pos_file /var/log/td-agent/nginx.pos
&lt;/source&gt;

&lt;match nginx.access&gt;
  type forward
  &lt;server&gt;
    host xxx.xxx.xxx.xxx
  &lt;/server&gt;
&lt;/match&gt;</code></pre></noscript></div>
</p>

<p>ログサーバ側の<code>td-agent.conf</code>を下記のように修正してtd-agentの再起動</p>

<p><div><script src='https://gist.github.com/2732356.js?file=log-td-agent.conf'></script>
<noscript><pre><code># log収集用サーバの設定
&lt;source&gt;
  type forward
  port 24224
&lt;/source&gt;

&lt;match nginx.access&gt;
  type file
  path /var/log/td-agent/access_log
&lt;/match&gt;</code></pre></noscript></div>
</p>

<p>ログサーバ側のiptablesに追記した内容。webサーバからログサーバの24224portへのアクセスを許可してます。</p>

<p><div><script src='https://gist.github.com/2732356.js?file=iptables'></script>
<noscript><pre><code># fluentd setting
-A RH-Firewall-1-INPUT -m state --state NEW -s xxx.xxx.xxx.xxx -m tcp -p tcp --dport 24224 -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state NEW -s xxx.xxx.xxx.xxx -m udp -p udp --dport 24224 -j ACCEPT</code></pre></noscript></div>
</p>

<p>ログサーバの<code>/var/log/td-agent/access_log</code>に出力されていればOK</p>

<h2 id="web2mongodb">webサーバ、ログ収集サーバの2台構成で動かして、MongoDBにデータを入れる</h2>

<p><img src="https://blog.glidenote.com/images/2012/05/fluent-web-log-mongodb.png" alt="" /></p>

<p><code>/var/log/td-agent/access_log</code>への出力から、MongoDBに切り替え</p>

<h3 id="mongodb">MongoDBの導入</h3>

<p>```
/bin/cat «‘EOF’&gt; /etc/yum.repos.d/10gen.repo
[10gen]
name=10gen Repository
baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64
gpgcheck=0
EOF</p>

<p>yum install  mongo-10gen mongo-10gen-server –enablerepo=10gen
/etc/rc.d/init.d/mongod start
```</p>

<p>MongoDBにデータを入れられるように、fluent-plugin-mongoの導入。</p>

<p><code>
/usr/lib64/fluent/ruby/bin/fluent-gem install fluent-plugin-mongo
</code></p>

<p>ログサーバの<code>td-agent.conf</code>を下記のように修正してtd-agentの再起動。</p>

<p><div><script src='https://gist.github.com/2732356.js?file=log-mongo-td-agent.conf'></script>
<noscript><pre><code># logサーバ用設定(mongodb)
&lt;source&gt;
  type forward
  port 24224
&lt;/source&gt;

&lt;match nginx.access&gt;
  type mongo
  database nginx
  collection access
  host 127.0.0.1
  port 27017
  flush_interval 10s
&lt;/match&gt;</code></pre></noscript></div>
</p>

<p>実際にnginxのアクセスログが、MongoDBに入っているのを確認。</p>

<p><code>
[akira@vps001] $ mongo
MongoDB shell version: 2.0.5
connecting to: test
&gt; show dbs
local   (empty)
nginx   0.203125GB
&gt; use nginx
switched to db nginx
&gt; show collections
access
system.indexes
&gt; db.access.find();
{ "_id" : ObjectId("4fb8aa9ae304e43491000001"), "host" : "110.165.232.124", "user" : "-", "method" : "GET", "path" : "/index.view", "code" : "200", "size" : "639", "referer" : "http://music.glidenote.com/", "agent" : "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.46 Safari/536.5", "time" : ISODate("2012-05-20T08:25:01Z") }
{ "_id" : ObjectId("4fb8aa9ae304e43491000002"), "host" : "110.165.232.124", "user" : "-", "method" : "GET", "path" : "/favicon.ico", "code" : "404", "size" : "290", "referer" : "-", "agent" : "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.46 Safari/536.5", "time" : ISODate("2012-05-20T08:25:01Z") }
</code></p>

<p><img src="https://blog.glidenote.com/images/2012/05/fluent-log1.png" alt="" /></p>

<p>おー、ちゃんとデータが入っている。<br />
でもMongoDBが全く分からないので、集計は後でやってみる。</p>

<h2 id="section-1">今回の作業ではまった点</h2>

<ul>
  <li>nginxのlogフォーマットがapache形式と違っていたので、まったく出力されなかった。(fluentdが動いているのか判断出来なかった)</li>
  <li>fluentdがudpで通信をしていた。<code>sudo tcpdump -i eth0 port 24224 -nn</code>で気づいたのでiptablesで許可</li>
  <li>動作確認コマンドがよく分からなかった。debugを有効にして<code>echo '{"hoge":"fuga"}' | /usr/lib64/fluent/ruby/bin/fluent-cat debug.test</code>で動いているのを確認。</li>
  <li>2011年11月頃に書かれたサイトを参考に作業をしていたら、当時からconfの書き方とか変わっていてハマった。(バージョンを確認しましょう)</li>
</ul>

<h2 id="section-2">参考サイト</h2>

<ul>
  <li><a href="http://d.hatena.ne.jp/oranie/20120323/1332498317">#fluentd fluentd（td-agent）構築時に気をつけるポイントについて - iをgに変えるとorangeになることに気づいたoranieの日記</a></li>
  <li><a href="http://nozaq.hatenablog.com/entry/2012/03/12/002350">EC2インスタンス上でnginxのログをfluentd経由でS3へ飛ばしてみる - nozaq’s diary</a></li>
  <li><a href="http://d.hatena.ne.jp/fat47/20120426/1335428063">【作業メモ】Apacheログをfluentd+MongoDBで収集しRubyで集計してみたが… - FAT47の底辺インフラ議事録</a></li>
</ul>

<h2 id="section-3">参考書籍</h2>

<p>fluentdは開発が非常に活発なんですが、ドキュメント類が充実していないので、少し前のウェブ上の情報が使えないことが多かったです。
2012年5月20日現在は下記のSoftware Designが一番充実しているので<strong>必読</strong>です。</p>

<ul>
  <li><a href="https://www.amazon.co.jp/Software-Design-%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2-%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3-2012%E5%B9%B4/dp/B007Y725LE?SubscriptionId=AKIAJVWWFTEVIXZXZLWA&amp;tag=glidenote-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B007Y725LE">Software Design (ソフトウェア デザイン) 2012年 06月号 [雑誌]</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
