<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Serf | Glide Note]]></title>
  <link href="http://blog.glidenote.com/blog/categories/serf/atom.xml" rel="self"/>
  <link href="http://blog.glidenote.com/"/>
  <updated>2018-08-25T19:22:05+09:00</updated>
  <id>http://blog.glidenote.com/</id>
  <author>
    <name><![CDATA[Akira Maeda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Serf+HAProxyで作るAutomatic Load Balancer]]></title>
    <link href="http://blog.glidenote.com/blog/2013/10/30/serf-haproxy/"/>
    <updated>2013-10-30T23:16:00+09:00</updated>
    <id>http://blog.glidenote.com/blog/2013/10/30/serf-haproxy</id>
    <content type="html"><![CDATA[<ul>
  <li><a href="https://github.com/hashicorp/serf">hashicorp/serf</a></li>
  <li><a href="http://www.serfdom.io/">Serf</a></li>
</ul>

<p><a href="http://www.serfdom.io/">Serf</a>使ってますか！サーフ！</p>

<p>諸事情というか大人の事情で急遽自前でロードバランサを用意しないといけなくて、それをissueに書いてたら、
あんちぽさんが<a href="https://github.com/hashicorp/serf/tree/master/demo/web-load-balancer">Serf+HAProxy</a>使ったらいいのでは、
とIRCで助言をくれて、同日の<a href="http://mizzy.org/blog/2013/10/29/1/">mizzyさんのブログ</a>でもSerfに言及していたので、
ちょっとSerfの概要を知るためと、<code>Serf+HAProxy</code>が実際ロードバランサとしてどんな感じに使えるのか検証してみた。</p>

<blockquote class="twitter-tweet"><p>I told <a href="https://twitter.com/glidenote">@glidenote</a> about a combination of Serf and HAProxy this morning, and he has already implemented the arch. and done investigation...</p>&mdash; kentaro (@kentaro) <a href="https://twitter.com/kentaro/statuses/395150350899884032">October 29, 2013</a></blockquote>
<script async="" src="http://blog.glidenote.com//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Serfは新しいプロダクトだし、公式でSerf+HAProxyをDemoと言って紹介してるけど、ドキュメントが少なくて、
どうすれば動くのか、どういう仕組みなのか理解に苦労したので先に概要をちょっとまとめてみる。</p>

<h2 id="serf--haproxy">Serf + HAProxyの概要</h2>

<ul>
  <li>Serfは全てのサーバで動かす必要がある。</li>
  <li>クラスタという概念があって、各サーバ(ノード)で動いているSerfがクラスタにjoin/leaveすることが出来る。</li>
  <li>クラスタに参加している、ノード同士が相互通信をしていて、クラスタへのjoin/leaveするノードを検知している</li>
  <li>ノードがクラスタにjoin/leaveするとイベントが発生して、事前に設定したスクリプトを走らせることが出来る。
 今回の例だとロードバランサ側で<code>/etc/haproxy/haproxy.cfg</code>の修正スクリプトが走って、バランシング先のWEBサーバを自動で追加、除外してくれる。</li>
</ul>

<p><strong>2013年10月31日 19:00 修正</strong><br />
HAProxyの再起動と書いてましたが、正しくは<code>/etc/init.d/haproxy reload</code>なので、設定再読込でした。</p>

<h3 id="web-server1join">1.ロードバランサのクラスタにweb server1がjoin</h3>

<p><img src="https://blog.glidenote.com/images/2013/10/serfhaproxy0.png" alt="" /></p>

<h3 id="web-server1joinmember-join">2.Web server1がクラスタにjoinしてきたので、member-joinイベントが発生</h3>

<p><img src="https://blog.glidenote.com/images/2013/10/serfhaproxy1.png" alt="" /></p>

<ol>
  <li>ロードバランサで<code>member-join</code>イベントで指定しているスクリプトが実行される</li>
  <li>ロードバランサの<code>/etc/haproxy/haproxy.cfg</code>の書き換え、HAProxyの設定再読込がかかり、Web Server1がバランシング先に追加される。</li>
  <li>Web Serve1にアクセスが流れるようになる</li>
</ol>

<h3 id="web-server2joinmember-join">3.Web server2がクラスタにjoinしてきたので、member-joinイベントが発生</h3>

<p><img src="https://blog.glidenote.com/images/2013/10/serfhaproxy2.png" alt="" /></p>

<ol>
  <li>ロードバランサで<code>member-join</code>イベントで指定しているスクリプトが実行される</li>
  <li>ロードバランサの<code>/etc/haproxy/haproxy.cfg</code>の書き換え、HAProxyの設定再読込がかかり、Web Server2がバランシング先に追加される。</li>
  <li>Web Serve1とWeb Server2にアクセスが流れるようになる</li>
</ol>

<h3 id="web-server1member-leave">4.Web server1が突然の死。member-leaveイベントが発生</h3>

<p><img src="https://blog.glidenote.com/images/2013/10/serfhaproxy3.png" alt="" /></p>

<ol>
  <li>ロードバランサで<code>member-leave</code>イベントで指定しているスクリプトが実行される</li>
  <li>ロードバランサの<code>/etc/haproxy/haproxy.cfg</code>の書き換え、HAProxyの設定再読込がかかり、Web Server1がバランシング先から除外</li>
  <li>Web Server2だけアクセスが流れるようになる</li>
</ol>

<p>もしWeb Server1が復活したら、勝手にクラスタに参加してくるので、再度バランシング先に自動追加される。</p>

<h2 id="serfhaproxy">Serf+HAProxyのまとめ</h2>

<ul>
  <li>Webサーバの増減に伴って設定ファイル書き換え、commit、push、deployして、HAProxyのreloadとかする必要ない。</li>
  <li>Webサーバの増減をロードバランサが自動で検知してバランシング先に追加、除外を自動でしてくれる。</li>
  <li>Puppet(Chef)でSerf+HAProxyの設定をしておけば、インスタンス起動してPuppet(Chef)流せば勝手にサービスに投入される</li>
</ul>

<p>公式だと<code>apt-get</code>でCentOSで動かなかったり、apache勝手に入れてきたり、クラスタに参加出来なかったり
動くようになるまでなかなかつらかったので、CentOSでとりあえず動くものをGitHubに公開しておきましたので参考にどうぞ。
ローカルLAN用のeth1が無いと使えなかったり、私も触って1日なので、よく分かってない部分が多くて改良の余地が大いにありますが。
<a href="http://rubygems.org/gems/facter">facter</a>を組み合わせれば、自分自身の情報を他のノードに伝える事が簡単にできると思う。</p>

<p><code>http://LP_IP:9999/</code>にアクセスするとHAProxyの状態が確認出来て、自動でバランシング先が変化するのが確認出来る。</p>

<p><img src="https://blog.glidenote.com/images/2013/10/serfhaproxy5.png" alt="" /></p>

<ul>
  <li><a href="https://github.com/glidenote/serf-web-load-balancer">glidenote/serf-web-load-balancer</a></li>
</ul>

<p>あんちぽさんも<code>/etc/hosts</code>を自動で書き換えるものを作っていたので、勉強になります。</p>

<ul>
  <li><a href="https://github.com/kentaro/serf-hosts">kentaro/serf-hosts</a></li>
</ul>

<p>想定される使いどころとして、すぐ思い浮かぶのがnagiosとかmuninとかサーバ増えるたびに設定ファイル修正が必要なので、Serf使いどころだと思う。
サーバの増減とかに伴って、ファイル修正が必要な部分はSerf使えば解決するはず。</p>

<p>Serfはドキュメントも読み切れてないので引き続きいろいろと検証を続けてる。</p>

<p>Nagiosから脱却すべく最近使い始めた<a href="http://sensuapp.org/">Sensu</a>も、サーバの増減を自動で検知して勝手に監視が始まるので、
従来の<code>サーバ増やした（減らした)</code> =&gt; <code>設定ファイル修正commit、push、deploy</code> みたいな作業は今後無くなっていくんだろうな-。</p>

<p>Nagiosに代わるであろう監視ソフト<a href="http://sensuapp.org/">Sensu</a>についても、頑張って検証しているので機会があればブログに書こうと思う。</p>

<h2 id="section">参考</h2>

<ul>
  <li><a href="http://blog.kentarok.org/entry/2013/10/30/020120">Automatic <code>/etc/hosts</code> management with Serf - delirious thoughts</a></li>
  <li><a href="https://github.com/kentaro/serf-hosts">kentaro/serf-hosts</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
